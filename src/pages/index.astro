---
import packageJson from '../../package.json';
const version = packageJson.version;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Beat jet lag with science-based travel scheduling. Free alternative to expensive jet lag apps." />
		<meta name="theme-color" content="#0ea5e9" />
		<title>Flight Shifter - Beat Jet Lag with Science</title>
	</head>
	<body class="bg-gray-50 min-h-screen">
		<div class="container mx-auto px-4 py-8">
			<header class="text-center mb-12">
				<div class="flex items-center justify-center gap-2 mb-4">
					<span class="text-4xl">‚úàÔ∏è</span>
					<h1 class="text-4xl font-bold text-sky-600">Flight Shifter</h1>
					<span class="text-sm text-gray-500 bg-gray-200 px-2 py-1 rounded">v{version}</span>
				</div>
				<p class="text-xl text-gray-600 max-w-2xl mx-auto mb-3">
					Beat jet lag with science-based travel scheduling. Free, fast, and works offline.
				</p>
				<p class="text-sm text-gray-500 max-w-3xl mx-auto mb-2">
					Created in Stradbroke Island - The San Francisco of Australia but without the nasty coldness.
				</p>
				<p class="text-xs text-gray-400 max-w-2xl mx-auto">
					Based on Harvard Medical School circadian rhythm research ‚Ä¢ Light exposure algorithms from PLOS studies
				</p>
			</header>

			<main class="max-w-4xl mx-auto">
				<!-- Current Plan Status -->
				<div id="current-plan-status" class="bg-gradient-to-r from-sky-50 to-blue-50 rounded-xl border border-sky-200 p-6 mb-8" style="display: none;">
					<div class="text-center mb-4">
						<h2 class="text-2xl font-bold text-sky-800 mb-2">Your Active Plan</h2>
						<div id="flight-countdown" class="text-lg text-sky-600"></div>
					</div>
					
					<div class="grid md:grid-cols-2 gap-6">
						<!-- What to do NOW -->
						<div class="bg-white rounded-lg p-4 border border-sky-100">
							<h3 class="font-bold text-sky-800 mb-3 flex items-center gap-2">
								<span>‚è∞</span> Right Now
							</h3>
							<div id="current-action" class="text-sm text-gray-700">
								<!-- Populated by JavaScript -->
							</div>
						</div>
						
						<!-- Today's Plan -->
						<div class="bg-white rounded-lg p-4 border border-sky-100">
							<h3 class="font-bold text-sky-800 mb-3 flex items-center gap-2">
								<span>üìÖ</span> Today's Schedule
							</h3>
							<div id="today-schedule" class="text-sm text-gray-700 space-y-2">
								<!-- Populated by JavaScript -->
							</div>
						</div>
					</div>
					
					<div class="text-center mt-4">
						<a href="/summary" class="bg-sky-600 text-white px-6 py-2 rounded-lg hover:bg-sky-700 mr-3">üìã Full Schedule</a>
						<a href="/plan" class="bg-gray-100 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-200">üìñ Detailed Plan</a>
					</div>
				</div>

				<div class="bg-white rounded-xl shadow-lg p-8 mb-8">
					<h2 class="text-2xl font-semibold mb-6 text-center" id="form-title">Plan Your Trip</h2>
					
					<form id="jetlag-form" class="space-y-6">
						<div class="grid md:grid-cols-2 gap-6">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">
									Departure
								</label>
								<div class="space-y-2">
									<select 
										name="departureTimezone"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									>
										<option value="">Select timezone</option>
										<option value="PST">PST (Los Angeles)</option>
										<option value="EST">EST (New York)</option>
										<option value="GMT">GMT (London)</option>
										<option value="CET">CET (Paris/Berlin)</option>
										<option value="JST">JST (Tokyo)</option>
										<option value="AEST">AEST (Sydney)</option>
										<option value="HKT">HKT (Hong Kong)</option>
										<option value="SGT">SGT (Singapore)</option>
										<option value="IST">IST (Mumbai)</option>
									</select>
									<input 
										type="datetime-local" 
										name="departureTime"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									/>
								</div>
							</div>
							
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">
									Arrival
								</label>
								<div class="space-y-2">
									<select 
										name="arrivalTimezone"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									>
										<option value="">Select timezone</option>
										<option value="PST">PST (Los Angeles)</option>
										<option value="EST">EST (New York)</option>
										<option value="GMT">GMT (London)</option>
										<option value="CET">CET (Paris/Berlin)</option>
										<option value="JST">JST (Tokyo)</option>
										<option value="AEST">AEST (Sydney)</option>
										<option value="HKT">HKT (Hong Kong)</option>
										<option value="SGT">SGT (Singapore)</option>
										<option value="IST">IST (Mumbai)</option>
									</select>
									<input 
										type="datetime-local" 
										name="arrivalTime"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									/>
								</div>
							</div>
						</div>

						<div>
							<label class="block text-sm font-medium text-gray-700 mb-2">
								Your Normal Sleep Schedule
							</label>
							<p class="text-sm text-gray-600 mb-3">
								Enter your typical sleep times at home (in your home timezone)
							</p>
							<div class="grid grid-cols-2 gap-4">
								<div>
									<label class="text-sm text-gray-700 font-medium">When do you usually go to bed?</label>
									<input 
										type="time" 
										name="usualBedtime"
										value="23:00"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									/>
									<span class="text-xs text-gray-500">e.g., 11:00 PM</span>
								</div>
								<div>
									<label class="text-sm text-gray-700 font-medium">When do you usually wake up?</label>
									<input 
										type="time" 
										name="usualWakeTime"
										value="07:00"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent"
										required
									/>
									<span class="text-xs text-gray-500">e.g., 7:00 AM</span>
								</div>
							</div>
						</div>

						<div class="space-y-3">
							<button 
								type="submit"
								class="w-full bg-sky-600 hover:bg-sky-700 text-white font-semibold py-4 px-6 rounded-lg transition-colors"
							>
								Generate My Schedule ‚ú®
							</button>
							
							<button 
								type="button"
								id="quick-summary-btn"
								class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-6 rounded-lg transition-colors text-sm"
								style="display: none;"
							>
								üìã View Quick Summary (Mobile Friendly)
							</button>
							
							<button 
								type="button"
								id="import-plan-btn"
								class="w-full bg-blue-50 hover:bg-blue-100 text-blue-700 font-medium py-3 px-6 rounded-lg transition-colors text-sm border border-blue-200"
							>
								üìÇ Import Saved Plan
							</button>
						</div>
					</form>
				</div>

				<div class="grid md:grid-cols-3 gap-6 mb-8">
					<div class="bg-white rounded-lg p-6 text-center shadow-sm">
						<span class="text-3xl mb-3 block">üß™</span>
						<h3 class="font-semibold mb-2">Science-Based</h3>
						<p class="text-gray-600 text-sm">Using proven circadian rhythm research</p>
					</div>
					<div class="bg-white rounded-lg p-6 text-center shadow-sm">
						<span class="text-3xl mb-3 block">üí∞</span>
						<h3 class="font-semibold mb-2">Completely Free</h3>
						<p class="text-gray-600 text-sm">No subscription fees or per-trip charges</p>
					</div>
					<div class="bg-white rounded-lg p-6 text-center shadow-sm">
						<span class="text-3xl mb-3 block">üì±</span>
						<h3 class="font-semibold mb-2">Works Offline</h3>
						<p class="text-gray-600 text-sm">Access your plan anywhere, anytime</p>
					</div>
				</div>

				<div class="bg-sky-50 rounded-lg p-6 text-center">
					<h3 class="font-semibold text-sky-800 mb-2">üí° How It Works</h3>
					<p class="text-sky-700">
						Get personalized recommendations for light exposure, sleep timing, and meal scheduling 
						to minimize jet lag and help you feel great at your destination.
					</p>
				</div>
			</main>
		</div>

		<!-- Hidden file input for import -->
		<input type="file" id="import-file" accept=".json" style="display: none;">

		<script>
			document.getElementById('jetlag-form')?.addEventListener('submit', function(e) {
				e.preventDefault();
				
				const formData = new FormData(e.target as HTMLFormElement);
				const travelDetails = {
					departureTimezone: formData.get('departureTimezone') as string,
					arrivalTimezone: formData.get('arrivalTimezone') as string,
					departureTime: formData.get('departureTime') as string,
					arrivalTime: formData.get('arrivalTime') as string,
					usualBedtime: formData.get('usualBedtime') as string,
					usualWakeTime: formData.get('usualWakeTime') as string,
				};

				// Enhanced calculation using timezone-aware algorithms
				// Simple client-side calculation for demo
				const timezones: Record<string, number> = {
					'PST': -8, 'EST': -5, 'GMT': 0, 'CET': 1, 'JST': 9, 
					'AEST': 10, 'HKT': 8, 'SGT': 8, 'IST': 5.5
				};
				
				const depOffset = timezones[travelDetails.departureTimezone] || 0;
				const arrOffset = timezones[travelDetails.arrivalTimezone] || 0;
				const timeDiff = arrOffset - depOffset;
				const direction = timeDiff > 0 ? 'eastward' : 'westward';
				const timeZonesDifference = Math.abs(timeDiff);
				
				// Calculate flight duration and arrival time context
				const depDate = new Date(travelDetails.departureTime);
				const arrDate = new Date(travelDetails.arrivalTime);
				const flightDuration = Math.abs(arrDate.getTime() - depDate.getTime()) / (1000 * 60 * 60);
				
				// Adjust arrival time to destination timezone for better recommendations
				const arrivalHour = arrDate.getHours();
				const isLongFlight = flightDuration > 12;
				const isMajorTimeChange = timeZonesDifference > 8;
				
				let estimatedAdjustmentDays = Math.ceil(timeZonesDifference * 0.8);
				if (isLongFlight) estimatedAdjustmentDays += 1;
				if (isMajorTimeChange) estimatedAdjustmentDays += 1;
				
				const plan = {
					travelDetails,
					timeZonesDifference,
					direction,
					estimatedAdjustmentDays,
					flightDuration: Math.round(flightDuration * 10) / 10,
					arrivalLocalTime: `${arrivalHour}:${arrDate.getMinutes().toString().padStart(2, '0')}`,
					isLongFlight,
					isMajorTimeChange
				};
				
				// Store the plan in localStorage to pass to results page
				localStorage.setItem('jetlagPlan', JSON.stringify(plan));
				
				// Show summary button and navigate to results page
				const summaryBtn = document.getElementById('quick-summary-btn');
				if (summaryBtn) {
					summaryBtn.style.display = 'block';
					summaryBtn.onclick = () => window.location.href = '/summary';
				}
				
				// Navigate to results page
				window.location.href = '/plan';
			});

			// Show summary button if plan exists and populate current status
			document.addEventListener('DOMContentLoaded', function() {
				const existingPlan = localStorage.getItem('jetlagPlan');
				const summaryBtn = document.getElementById('quick-summary-btn');
				
				if (existingPlan) {
					// Show summary button
					if (summaryBtn) {
						summaryBtn.style.display = 'block';
						summaryBtn.onclick = () => window.location.href = '/summary';
					}
					
					// Show current plan status
					showCurrentPlanStatus(JSON.parse(existingPlan));
				}
			});

			function showCurrentPlanStatus(plan) {
				const statusDiv = document.getElementById('current-plan-status');
				const formTitle = document.getElementById('form-title');
				
				if (!statusDiv || !plan.travelDetails) return;
				
				// Show the status section
				statusDiv.style.display = 'block';
				
				// Update form title
				if (formTitle) {
					formTitle.textContent = 'Update Your Trip';
				}
				
				// Calculate days until flight
				const now = new Date();
				const departureDate = new Date(plan.travelDetails.departureTime);
				const daysUntilFlight = Math.ceil((departureDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
				
				// Update countdown
				const countdownDiv = document.getElementById('flight-countdown');
				if (countdownDiv) {
					if (daysUntilFlight > 0) {
						countdownDiv.innerHTML = `‚úàÔ∏è Flight in <strong>${daysUntilFlight} day${daysUntilFlight !== 1 ? 's' : ''}</strong> to ${plan.travelDetails.arrivalTimezone}`;
					} else if (daysUntilFlight === 0) {
						countdownDiv.innerHTML = `üõ´ <strong>Flight Day!</strong> to ${plan.travelDetails.arrivalTimezone}`;
					} else {
						countdownDiv.innerHTML = `üåç Currently in ${plan.travelDetails.arrivalTimezone} (${Math.abs(daysUntilFlight)} days since arrival)`;
					}
				}
				
				// Show current action based on time of day
				showCurrentAction(plan, now, daysUntilFlight);
				
				// Show today's schedule
				showTodaySchedule(plan, now, daysUntilFlight);
			}

			function showCurrentAction(plan, now, daysUntilFlight) {
				const currentActionDiv = document.getElementById('current-action');
				if (!currentActionDiv) return;
				
				const currentHour = now.getHours();
				const currentMinute = now.getMinutes();
				const currentTime = currentHour + (currentMinute / 60);
				
				let action = '';
				let actionClass = '';
				
				if (daysUntilFlight < 0) {
					// Already arrived
					action = `<div class="text-green-700 font-medium">üéâ You've arrived! Focus on local schedule and get sunlight during local daytime.</div>`;
				} else if (daysUntilFlight === 0) {
					// Flight day
					action = `<div class="text-blue-700 font-medium">üõ´ <strong>Flight Day!</strong><br>Follow your travel day plan and stay hydrated.</div>`;
				} else {
					// Pre-flight preparation
					if (plan.direction === 'eastward') {
						if (currentTime >= 6 && currentTime < 10) {
							action = `<div class="text-yellow-700 font-medium">üåÖ <strong>GET BRIGHT LIGHT NOW!</strong><br>Go outside or use 10,000+ lux light therapy. This advances your clock.</div>`;
							actionClass = 'bg-yellow-50 border-yellow-200';
						} else if (currentTime >= 19 && currentTime < 23) {
							action = `<div class="text-purple-700 font-medium">üåô <strong>DIM THE LIGHTS</strong><br>Start winding down. Use blue light filters, dim all lights.</div>`;
							actionClass = 'bg-purple-50 border-purple-200';
						} else if (currentTime >= 23 || currentTime < 6) {
							action = `<div class="text-gray-700 font-medium">üò¥ <strong>SLEEP TIME</strong><br>Go to bed earlier than usual. Avoid all screens and light.</div>`;
							actionClass = 'bg-gray-50 border-gray-200';
						} else {
							action = `<div class="text-gray-600">‚òÄÔ∏è Normal daytime activities. Next: Get bright light at 6-10 AM tomorrow.</div>`;
						}
					} else {
						// Westward
						if (currentTime >= 6 && currentTime < 10) {
							action = `<div class="text-blue-700 font-medium">üï∂Ô∏è <strong>AVOID BRIGHT LIGHT</strong><br>Keep lights dim, wear sunglasses outside. Sleep in if possible.</div>`;
							actionClass = 'bg-blue-50 border-blue-200';
						} else if (currentTime >= 18 && currentTime < 22) {
							action = `<div class="text-yellow-700 font-medium">üí° <strong>GET BRIGHT LIGHT NOW!</strong><br>Seek bright light to delay your clock. Stay active.</div>`;
							actionClass = 'bg-yellow-50 border-yellow-200';
						} else if (currentTime >= 22 || currentTime < 2) {
							action = `<div class="text-green-700 font-medium">üåô Stay up later than usual. Continue bright light exposure until bedtime.</div>`;
							actionClass = 'bg-green-50 border-green-200';
						} else {
							action = `<div class="text-gray-600">üåô Normal late evening/night. Next: Avoid bright light 6-10 AM tomorrow.</div>`;
						}
					}
				}
				
				currentActionDiv.innerHTML = action;
				if (actionClass) {
					currentActionDiv.className = `text-sm p-3 rounded-lg border ${actionClass}`;
				}
			}

			function showTodaySchedule(plan, now, daysUntilFlight) {
				const scheduleDiv = document.getElementById('today-schedule');
				if (!scheduleDiv) return;
				
				let schedule = '';
				
				if (daysUntilFlight <= 0) {
					schedule = `
						<div class="font-medium text-green-800">‚úÖ Focus on destination schedule</div>
						<div>‚Ä¢ Get sunlight during local daytime</div>
						<div>‚Ä¢ Eat meals at local times</div>
						<div>‚Ä¢ Stay hydrated and avoid alcohol</div>
					`;
				} else {
					// Calculate today's specific adjustments - much more gradual
					const adjustmentDay = Math.min(3, 4 - daysUntilFlight);
					const maxDailyShift = 0.75; // 45 minutes max per day
					const totalDays = Math.max(3, Math.min(plan.timeZonesDifference, 7));
					const dailyShift = Math.min(maxDailyShift, plan.timeZonesDifference / totalDays);
					const todaysShift = dailyShift * adjustmentDay;
					
					if (plan.direction === 'eastward') {
						const originalBedtime = plan.travelDetails?.usualBedtime || '23:00';
						const originalWakeTime = plan.travelDetails?.usualWakeTime || '07:00';
						
						const [bedHour, bedMin] = originalBedtime.split(':').map(Number);
						const [wakeHour, wakeMin] = originalWakeTime.split(':').map(Number);
						
						const targetBedtime = Math.max(bedHour - todaysShift, 20);
						const targetWakeTime = Math.max(wakeHour - todaysShift, 5);
						const lightDimTime = targetBedtime - 2;
						
						schedule = `
							<div class="font-medium text-sky-800">üåÖ Advancing your schedule (Day ${adjustmentDay})</div>
							<div><strong>${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}:</strong> üò¥ WAKE UP and get bright light immediately</div>
							<div><strong>06:00-10:00:</strong> üåÖ Continue bright light (10,000+ lux outdoors)</div>
							<div><strong>${Math.floor(lightDimTime)}:${((lightDimTime % 1) * 60).toFixed(0).padStart(2, '0')}:</strong> üåô Start dimming all lights</div>
							<div><strong>${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}:</strong> üò¥ GO TO BED (${(todaysShift * 60).toFixed(0)} min earlier)</div>
							<div><strong>Naps:</strong> ‚ö†Ô∏è Avoid or <20 min before 2 PM only</div>
						`;
					} else {
						const originalBedtime = plan.travelDetails?.usualBedtime || '23:00';
						const originalWakeTime = plan.travelDetails?.usualWakeTime || '07:00';
						
						const [bedHour, bedMin] = originalBedtime.split(':').map(Number);
						const [wakeHour, wakeMin] = originalWakeTime.split(':').map(Number);
						
						// Much more conservative westward adjustment
						const maxBedtimeShift = Math.min(2, todaysShift); // Never more than 2 hours later
						const targetBedtime = Math.min(bedHour + maxBedtimeShift, bedHour + 2);
						const targetWakeTime = Math.min(wakeHour + maxBedtimeShift, wakeHour + 2);
						
						const actualBedtimeShift = targetBedtime - bedHour; // Actual difference (could be negative)
						const actualWakeShift = targetWakeTime - wakeHour;
						
						const bedtimeText = actualBedtimeShift >= 0 ? `${(actualBedtimeShift * 60).toFixed(0)} min later` : `${Math.abs(actualBedtimeShift * 60).toFixed(0)} min earlier`;
						const wakeText = actualWakeShift >= 0 ? `${(actualWakeShift * 60).toFixed(0)} min later` : `${Math.abs(actualWakeShift * 60).toFixed(0)} min earlier`;
						
						schedule = `
							<div class="font-medium text-sky-800">üåô Delaying your schedule (Day ${adjustmentDay}) - Gradual approach</div>
							<div><strong>06:00-10:00:</strong> üï∂Ô∏è Keep lights dim, wear sunglasses</div>
							<div><strong>${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}:</strong> üò¥ WAKE UP (${wakeText} - realistic!)</div>
							<div><strong>16:00-${Math.floor(targetBedtime - 1)}:00:</strong> üåÖ Bright light exposure to gradually delay clock</div>
							<div><strong>${Math.floor(targetBedtime - 1)}:${((((targetBedtime - 1) % 1) * 60).toFixed(0).padStart(2, '0'))}:</strong> üåô Start dimming lights</div>
							<div><strong>${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}:</strong> üò¥ GO TO BED (${bedtimeText} - realistic!)</div>
							<div><strong>Naps:</strong> ‚úÖ <30 min, before 3 PM, 8+ hrs before bed</div>
						`;
					}
				}
				
				scheduleDiv.innerHTML = schedule;
			}

			// Import plan functionality
			document.getElementById('import-plan-btn')?.addEventListener('click', function() {
				document.getElementById('import-file')?.click();
			});

			document.getElementById('import-file')?.addEventListener('change', function(e) {
				const file = e.target.files[0];
				if (file) {
					const reader = new FileReader();
					reader.onload = function(e) {
						try {
							const importData = JSON.parse(e.target.result);
							
							if (importData.flightShifterPlan) {
								localStorage.setItem('jetlagPlan', JSON.stringify(importData.flightShifterPlan));
								
								// Show success and navigate to plan
								const btn = document.getElementById('import-plan-btn');
								const originalText = btn?.textContent;
								if (btn) {
									btn.textContent = '‚úÖ Plan Imported!';
									setTimeout(() => {
										window.location.href = '/plan';
									}, 1000);
								}
							} else {
								alert('Invalid Flight Shifter plan file.');
							}
						} catch (error) {
							alert('Error reading file. Please ensure it\'s a valid Flight Shifter plan.');
						}
					};
					reader.readAsText(file);
				}
			});
		</script>
	</body>
</html>
