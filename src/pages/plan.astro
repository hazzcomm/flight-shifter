---
import packageJson from '../../package.json';
const version = packageJson.version;

// In a real app, this would come from form submission or URL params
const samplePlan = {
  timeZonesDifference: 8,
  direction: 'eastward' as const,
  estimatedAdjustmentDays: 6,
  preTravelDays: [
    [
      {
        time: '07:00',
        action: 'bright_light' as const,
        description: 'Get bright light exposure (10,000+ lux) - outdoor sunlight or light therapy box',
        intensity: '10,000+ lux'
      },
      {
        time: '19:00',
        action: 'avoid_light' as const,
        description: 'Start dimming lights, avoid screens. Use blue light filters.'
      }
    ]
  ],
  travelDay: [
    {
      time: 'During flight',
      action: 'avoid_light' as const,
      description: 'Keep cabin lights dim, wear eye mask, try to sleep if it\'s nighttime at destination'
    },
    {
      time: 'Upon arrival morning',
      action: 'bright_light' as const,
      description: 'Get outdoor sunlight immediately upon arrival if it\'s morning at destination',
      intensity: 'Natural sunlight'
    }
  ],
  postTravelDays: [
    [
      {
        time: '06:00',
        action: 'bright_light' as const,
        description: 'Get morning sunlight - go outside within 30 minutes of waking',
        intensity: 'Natural sunlight'
      },
      {
        time: '19:00',
        action: 'avoid_light' as const,
        description: 'Start dimming lights 2-3 hours before intended bedtime'
      }
    ]
  ],
  sleepSchedule: {
    newBedtime: '15:00',
    newWakeTime: '23:00',
    adjustmentPhase: 'Major adjustment needed'
  }
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Your personalized jet lag prevention plan - science-based light exposure schedule" />
    <meta name="theme-color" content="#0ea5e9" />
    <title>Your Jet Lag Plan - Flight Shifter</title>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <header class="text-center mb-8">
        <div class="flex items-center justify-center gap-2 mb-4">
          <span class="text-3xl">‚úàÔ∏è</span>
          <h1 class="text-3xl font-bold text-sky-600">Flight Shifter</h1>
          <span class="text-sm text-gray-500 bg-gray-200 px-2 py-1 rounded">v{version}</span>
        </div>
        <div class="flex gap-4 justify-center mb-3 flex-wrap">
          <a href="/" class="text-sky-600 hover:text-sky-800 underline">‚Üê Back to planner</a>
          <a href="/summary" class="text-sky-600 hover:text-sky-800 underline">üìã Quick summary</a>
          <button id="export-plan" class="text-sky-600 hover:text-sky-800 underline bg-none border-none cursor-pointer">üíæ Export plan</button>
          <button id="import-plan" class="text-sky-600 hover:text-sky-800 underline bg-none border-none cursor-pointer">üìÇ Import plan</button>
        </div>
        <p class="text-xs text-gray-400 max-w-2xl mx-auto">
          Created in Stradbroke Island ‚Ä¢ Based on Harvard Medical School & PLOS research
        </p>
      </header>

      <main class="max-w-4xl mx-auto">
        <!-- Plan Overview -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div class="flex items-center gap-3 mb-6">
            <span class="text-2xl">üß≠</span>
            <h2 class="text-2xl font-bold text-gray-800">Your Jet Lag Plan</h2>
          </div>
          
          <div class="grid md:grid-cols-3 gap-6 mb-6">
            <div class="text-center p-4 bg-sky-50 rounded-lg">
              <div class="text-2xl font-bold text-sky-600">{samplePlan.timeZonesDifference}</div>
              <div class="text-sm text-gray-600">Time zones</div>
            </div>
            <div class="text-center p-4 bg-green-50 rounded-lg">
              <div class="text-2xl font-bold text-green-600">{samplePlan.estimatedAdjustmentDays}</div>
              <div class="text-sm text-gray-600">Adjustment days</div>
            </div>
            <div class="text-center p-4 bg-orange-50 rounded-lg">
              <div class="text-lg font-bold text-orange-600 capitalize">{samplePlan.direction}</div>
              <div class="text-sm text-gray-600">Travel direction</div>
            </div>
          </div>

          <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
            <p class="text-blue-800">
              <strong>Strategy:</strong> {samplePlan.direction === 'eastward' ? 
                'Advance your clock with morning light and evening darkness' : 
                'Delay your clock with evening light and morning darkness'}
            </p>
          </div>
        </div>

        <!-- Pre-Travel Schedule -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div class="flex items-center gap-3 mb-6">
            <span class="text-2xl">üìÖ</span>
            <h3 class="text-xl font-bold text-gray-800">Pre-Travel Preparation</h3>
          </div>
          
          <div id="detailed-pre-travel-schedule">
            <!-- Will be populated by JavaScript with comprehensive schedules -->
          </div>
        </div>

        <!-- Travel Day -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div class="flex items-center gap-3 mb-6">
            <span class="text-2xl">üõ´</span>
            <h3 class="text-xl font-bold text-gray-800">Travel Day</h3>
          </div>
          
          <div class="space-y-3">
            {samplePlan.travelDay.map((rec, index) => (
              <div key={index} class="flex items-start gap-4 p-4 bg-sky-50 rounded-lg">
                <div class="flex-shrink-0">
                  <span class={`inline-block w-3 h-3 rounded-full ${
                    rec.action === 'bright_light' ? 'bg-yellow-400' :
                    rec.action === 'avoid_light' ? 'bg-gray-400' :
                    rec.action === 'dim_light' ? 'bg-orange-300' : 'bg-blue-400'
                  }`}></span>
                </div>
                <div class="flex-grow">
                  <div class="flex items-center gap-2 mb-1">
                    <span class="font-medium text-gray-800">{rec.time}</span>
                    <span class={`text-xs px-2 py-1 rounded-full ${
                      rec.action === 'bright_light' ? 'bg-yellow-100 text-yellow-800' :
                      rec.action === 'avoid_light' ? 'bg-gray-100 text-gray-800' :
                      rec.action === 'dim_light' ? 'bg-orange-100 text-orange-800' : 'bg-blue-100 text-blue-800'
                    }`}>
                      {rec.action.replace('_', ' ')}
                    </span>
                    {rec.intensity && (
                      <span class="text-xs text-gray-500">({rec.intensity})</span>
                    )}
                  </div>
                  <p class="text-gray-600 text-sm">{rec.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Post-Travel Schedule -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div class="flex items-center gap-3 mb-6">
            <span class="text-2xl">üèÅ</span>
            <h3 class="text-xl font-bold text-gray-800">After Arrival</h3>
          </div>
          
          {samplePlan.postTravelDays.map((day, dayIndex) => (
            <div class="mb-6 last:mb-0">
              <h4 class="font-semibold text-gray-700 mb-3">Day {dayIndex + 1} at destination</h4>
              <div class="space-y-3">
                {day.map((rec, recIndex) => (
                  <div key={recIndex} class="flex items-start gap-4 p-4 bg-green-50 rounded-lg">
                    <div class="flex-shrink-0">
                      <span class={`inline-block w-3 h-3 rounded-full ${
                        rec.action === 'bright_light' ? 'bg-yellow-400' :
                        rec.action === 'avoid_light' ? 'bg-gray-400' :
                        rec.action === 'dim_light' ? 'bg-orange-300' : 'bg-blue-400'
                      }`}></span>
                    </div>
                    <div class="flex-grow">
                      <div class="flex items-center gap-2 mb-1">
                        <span class="font-medium text-gray-800">{rec.time}</span>
                        <span class={`text-xs px-2 py-1 rounded-full ${
                          rec.action === 'bright_light' ? 'bg-yellow-100 text-yellow-800' :
                          rec.action === 'avoid_light' ? 'bg-gray-100 text-gray-800' :
                          rec.action === 'dim_light' ? 'bg-orange-100 text-orange-800' : 'bg-blue-100 text-blue-800'
                        }`}>
                          {rec.action.replace('_', ' ')}
                        </span>
                        {rec.intensity && (
                          <span class="text-xs text-gray-500">({rec.intensity})</span>
                        )}
                      </div>
                      <p class="text-gray-600 text-sm">{rec.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        <!-- Tips & Notes -->
        <div class="bg-amber-50 border border-amber-200 rounded-xl p-6">
          <h3 class="font-bold text-amber-800 mb-4 flex items-center gap-2">
            <span>üí°</span> Pro Tips
          </h3>
          <ul class="space-y-2 text-amber-700 text-sm">
            <li>‚Ä¢ Natural sunlight is always better than artificial light when possible</li>
            <li>‚Ä¢ Light therapy boxes should be 10,000 lux for maximum effectiveness</li>
            <li>‚Ä¢ Blue light blocking glasses help when you need to avoid light</li>
            <li>‚Ä¢ Stay hydrated and avoid alcohol during adjustment period</li>
            <li>‚Ä¢ Individual results may vary - listen to your body</li>
          </ul>
        </div>
      </main>
    </div>

    <!-- Hidden file input for import -->
    <input type="file" id="import-file" accept=".json" style="display: none;">

    <script>
      // Export plan functionality
      document.getElementById('export-plan')?.addEventListener('click', function() {
        const planData = localStorage.getItem('jetlagPlan');
        if (planData) {
          const plan = JSON.parse(planData);
          const exportData = {
            flightShifterPlan: plan,
            exportDate: new Date().toISOString(),
            version: '0.4.0'
          };
          
          const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
          });
          
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `flight-shifter-plan-${new Date().toISOString().split('T')[0]}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          // Show success message
          const btn = document.getElementById('export-plan');
          const originalText = btn?.textContent;
          if (btn) {
            btn.textContent = '‚úÖ Downloaded!';
            setTimeout(() => {
              btn.textContent = originalText;
            }, 2000);
          }
        } else {
          alert('No plan found to export. Please create a plan first.');
        }
      });

      // Import plan functionality
      document.getElementById('import-plan')?.addEventListener('click', function() {
        document.getElementById('import-file')?.click();
      });

      document.getElementById('import-file')?.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            try {
              const importData = JSON.parse(e.target.result);
              
              if (importData.flightShifterPlan) {
                localStorage.setItem('jetlagPlan', JSON.stringify(importData.flightShifterPlan));
                
                // Show success and reload
                const btn = document.getElementById('import-plan');
                const originalText = btn?.textContent;
                if (btn) {
                  btn.textContent = '‚úÖ Imported!';
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                }
              } else {
                alert('Invalid Flight Shifter plan file.');
              }
            } catch (error) {
              alert('Error reading file. Please ensure it\'s a valid Flight Shifter plan.');
            }
          };
          reader.readAsText(file);
        }
      });

      // Populate detailed pre-travel schedule on page load
      document.addEventListener('DOMContentLoaded', function() {
        const planData = localStorage.getItem('jetlagPlan');
        if (planData) {
          const plan = JSON.parse(planData);
          populateDetailedSchedule(plan);
        }
      });

      function populateDetailedSchedule(plan) {
        const scheduleDiv = document.getElementById('detailed-pre-travel-schedule');
        if (!scheduleDiv || !plan.travelDetails) return;

        const originalBedtime = plan.travelDetails.usualBedtime || '23:00';
        const originalWakeTime = plan.travelDetails.usualWakeTime || '07:00';
        
        const [bedHour, bedMin] = originalBedtime.split(':').map(Number);
        const [wakeHour, wakeMin] = originalWakeTime.split(':').map(Number);
        
        const maxDailyShift = 0.75; // 45 minutes max per day
        const totalDays = Math.max(3, Math.min(plan.timeZonesDifference, 7));
        const dailyShift = Math.min(maxDailyShift, plan.timeZonesDifference / totalDays);
        let scheduleHTML = '';

        for (let day = 1; day <= 3; day++) {
          const todaysShift = dailyShift * day;
          const dayName = day === 1 ? 'Tomorrow' : day === 2 ? 'Day 2' : 'Day 3 (Flight Day - 1)';
          
          scheduleHTML += `
            <div class="border-l-4 border-sky-500 pl-6 pb-6 mb-6 last:mb-0">
              <h4 class="font-bold text-sky-800 text-lg mb-4">${dayName}</h4>
          `;
          
          if (plan.direction === 'eastward') {
            const targetBedtime = Math.max(bedHour - todaysShift, Math.max(bedHour - 3, 19));
            const targetWakeTime = Math.max(wakeHour - todaysShift, Math.max(wakeHour - 3, 5));
            const lightDimTime = Math.max(targetBedtime - 2, 18);
            
            scheduleHTML += `
              <div class="bg-blue-50 p-4 rounded-lg mb-4">
                <div class="font-bold text-blue-800 mb-2">üò¥ SLEEP SCHEDULE</div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div><strong>Wake up:</strong> ${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}</div>
                  <div><strong>Go to bed:</strong> ${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}</div>
                </div>
                <div class="text-xs text-blue-600 mt-1">(${(todaysShift * 60).toFixed(0)} minutes earlier than usual)</div>
              </div>
              
              <div class="space-y-3 text-sm">
                <div class="flex items-start gap-3">
                  <span class="text-lg">üò¥</span>
                  <div><strong>${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}</strong> - WAKE UP and immediately get bright light (go outside if possible)</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üåÖ</span>
                  <div><strong>06:00-10:00</strong> - Bright light therapy session (10,000+ lux outdoor sunlight preferred)</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üçΩÔ∏è</span>
                  <div><strong>12:00-14:00</strong> - Normal lunch, avoid heavy meals that can affect sleep</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üåô</span>
                  <div><strong>${Math.floor(lightDimTime)}:${((lightDimTime % 1) * 60).toFixed(0).padStart(2, '0')}</strong> - Start dimming ALL lights, turn on blue light filters</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üò¥</span>
                  <div><strong>${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}</strong> - GO TO BED (no screens, complete darkness)</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">‚ö†Ô∏è</span>
                  <div><strong>Naps:</strong> AVOID or maximum 20 minutes before 2 PM only</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">‚òï</span>
                  <div><strong>Caffeine:</strong> Stop all caffeine by 2 PM to avoid sleep interference</div>
                </div>
              </div>
            `;
          } else {
            const maxBedtimeShift = Math.min(2, todaysShift); // Never more than 2 hours later
            const targetBedtime = Math.min(bedHour + maxBedtimeShift, bedHour + 2);
            const targetWakeTime = Math.min(wakeHour + maxBedtimeShift, wakeHour + 2);
            
            scheduleHTML += `
              <div class="bg-orange-50 p-4 rounded-lg mb-4">
                <div class="font-bold text-orange-800 mb-2">üò¥ SLEEP SCHEDULE</div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div><strong>Wake up:</strong> ${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}</div>
                  <div><strong>Go to bed:</strong> ${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}</div>
                </div>
                <div class="text-xs text-orange-600 mt-1">(${(maxBedtimeShift * 60).toFixed(0)} minutes later than usual - realistic!)</div>
              </div>
              
              <div class="space-y-3 text-sm">
                <div class="flex items-start gap-3">
                  <span class="text-lg">üï∂Ô∏è</span>
                  <div><strong>06:00-10:00</strong> - Keep lights DIM, wear sunglasses outside</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üò¥</span>
                  <div><strong>${Math.floor(targetWakeTime)}:${((targetWakeTime % 1) * 60).toFixed(0).padStart(2, '0')}</strong> - WAKE UP (sleep in ${(maxBedtimeShift * 60).toFixed(0)} min longer), keep lighting minimal</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">‚òÄÔ∏è</span>
                  <div><strong>12:00-15:00</strong> - Normal indoor lighting OK, avoid bright outdoor sun</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üí§</span>
                  <div><strong>15:00-16:00</strong> - Strategic nap window: <30 min, must end 8+ hours before bed</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üåÖ</span>
                  <div><strong>16:00-${Math.floor(targetBedtime - 1)}:00</strong> - Bright light exposure to gradually delay your clock</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üåô</span>
                  <div><strong>${Math.floor(targetBedtime - 1)}:${((((targetBedtime - 1) % 1) * 60).toFixed(0).padStart(2, '0'))}</strong> - Start dimming lights, prepare for bed</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">üò¥</span>
                  <div><strong>${Math.floor(targetBedtime)}:${((targetBedtime % 1) * 60).toFixed(0).padStart(2, '0')}</strong> - GO TO BED (${(maxBedtimeShift * 60).toFixed(0)} min later - doable!)</div>
                </div>
                <div class="flex items-start gap-3">
                  <span class="text-lg">‚òï</span>
                  <div><strong>Caffeine:</strong> OK until ${Math.floor(targetBedtime - 6)}:00, then avoid</div>
                </div>
              </div>
            `;
          }
          
          scheduleHTML += '</div>';
        }
        
        scheduleDiv.innerHTML = scheduleHTML;
      }
    </script>
  </body>
</html>